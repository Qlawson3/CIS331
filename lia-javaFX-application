package com.mycompany.universityapp;

import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.*;
import javafx.event.*;
import javafx.geometry.*;
import java.util.*;



/**
 * JavaFX App
 */
public class App extends Application {
    
    // Declare Class Level Data Fields
        
        // for Student
        TextField txtStudName;
        TextField txtStudID;
        TextField txtSSN;
        TextField txtHomeAddress;
        TextField txtEmail;
        TextField txtGPA;
        TextField txtEmergName;
        TextField txtEmergEmail;
        TextField txtEmergPhone;
        Label lblStudName;
        Label lblStudID;
        Label lblSSN;
        Label lblHomeAddress;
        Label lblEmail;
        Label lblGPA;
        Label lblEmergName;
        Label lblEmergEmail;
        Label lblEmergPhone;
        
        // for Semester
        TextField txtPeriod;
        TextField txtYear;
        Label lblPeriod;
        Label lblYear;
        
        // for Course
        Label lblCoursePrefix;
        TextField txtCoursePrefix;
        Label lblCourseNum;
        TextField txtCourseNum;
        Label lblCourseName;
        TextField txtCourseName;
        Label lblCourseDays;
        TextField txtCourseDays;
        Label lblStartTime;
        TextField txtStartTime;
        Label lblEndTime;
        TextField txtEndTime;
        Label lblCreditHours;
        TextField txtCreditHours;
//      Label lblCourseInst;
//      TextField txtCourseInst;
        
        // for Enroll
        Label lblEnrollID;
        Label lblSelectStud;
        Label lblSelectSem;
        Label lblSelectCrs;
        
        TextField txtEnrollID;
        
        // titles of window kind of
        Label lblEntryStud;
        Label lblEntrySem;
        Label lblEntryCourse;
        Label lblEntryEnroll;
        
        // drop down for create or edit
        ChoiceBox studDropDown;
        ChoiceBox semDropDown;
        ChoiceBox crsDropDown;
        
        
        // buttons to save 
        Button btnSaveStud;
        Button btnSaveSem;
        Button btnSaveCourse;
        Button btnEnroll;
        
        // for Editing
        ComboBox cmboEditStud;
        ComboBox cmboEditSem;
        ComboBox cmboEditCourse;
        
        // comboBoxes for enroll
        ComboBox cmboEnrollStud;
        ComboBox cmboEnrollSem;
        ComboBox cmboEnrollCrs;
        
        // lists to store object creations
        ArrayList<Student> students = new ArrayList<>();
        ArrayList<Course> courses = new ArrayList<>();
        ArrayList<Faculty> faculty = new ArrayList<>();
        ArrayList<Semester> semesters = new ArrayList<>();
        ArrayList<Enrollment> enrollments = new ArrayList<>();
        
        
    
        
       

    @Override
    public void start(Stage stage) {
        
        // Instantiate the above data fields within the start() method
        
        btnSaveStud = new Button("Save ->");
        btnSaveSem = new Button("Save ->");
        btnSaveCourse = new Button("Save ->");
        btnEnroll = new Button("Enroll ->");
        
        cmboEditStud = new ComboBox();
        cmboEditSem = new ComboBox();
        cmboEditCourse = new ComboBox();
        cmboEnrollStud = new ComboBox();
        cmboEnrollSem = new ComboBox();
        cmboEnrollCrs = new ComboBox();
        
        studDropDown = new ChoiceBox();
        studDropDown.getItems().add("Create Student");
        studDropDown.getItems().add("Edit Student");
        
        semDropDown = new ChoiceBox();
        semDropDown.getItems().add("Create Semester");
        semDropDown.getItems().add("Edit Semester");
        
        crsDropDown = new ChoiceBox();
        crsDropDown.getItems().add("Create Course");
        crsDropDown.getItems().add("Edit Course");
        
        lblStudName = new Label("First and Last Name");
        lblStudID = new Label("Student ID");
        lblSSN = new Label("Social Security Number");
        lblHomeAddress = new Label("Home Address");
        lblEmail = new Label("Email Address");
        lblGPA = new Label("GPA");
        lblEmergName = new Label("Emergency Contact Name");
        lblEmergEmail = new Label("Emergency Contact Email Address");
        lblEmergPhone = new Label("Emergency Contact Phone");
        
        txtStudName = new TextField();
        txtStudID = new TextField();
        txtSSN = new TextField();
        txtHomeAddress = new TextField();
        txtEmail = new TextField();
        txtGPA = new TextField();
        txtEmergName = new TextField();
        txtEmergEmail = new TextField();
        txtEmergPhone = new TextField();
        
        lblPeriod = new Label("Period (Fall, Spring, etc)");
        lblYear = new Label("Year (YYYY)");
        
        txtPeriod = new TextField();
        txtYear = new TextField();
        
        lblCoursePrefix = new Label("Course Prefix");
        lblCourseNum = new Label("Course Number");
        lblCourseName = new Label("Course Name");
        lblCourseDays = new Label("Course Days");
        lblStartTime = new Label("Start Time");
        lblEndTime = new Label("End Time");
        lblCreditHours = new Label("Credit Hours");
        //lblCourseInst = new Label("Course Instructor");
        
        txtCoursePrefix = new TextField();
        txtCourseNum = new TextField();
        txtCourseName = new TextField();
        txtCourseDays = new TextField();
        txtStartTime = new TextField();
        txtEndTime = new TextField();
        txtCreditHours = new TextField();
        //txtCourseInst = new TextField();
        
        lblEnrollID = new Label("Enter an Enrollment ID");
        lblSelectStud = new Label("Select a Student");
        lblSelectSem = new Label("Select a Semester");
        lblSelectCrs = new Label("Select a Course");
        
        txtEnrollID = new TextField();
        
        lblEntryStud = new Label("Manage Students");
        lblEntrySem = new Label("Manage Semesters");
        lblEntryCourse = new Label("Manage Courses");
        lblEntryEnroll = new Label("Enroll a Student");
        
//        chkEditStud = new CheckBox("Edit Student   ");
//        chkEditSem = new CheckBox("Edit Semester   ");
//        
//        chkCreateStud = new CheckBox("Create Student");
//        chkCreateSem = new CheckBox("Create Semester");
       
        // for Tabs
        VBox overallVPane = new VBox();
        TabPane tPane = new TabPane();
        Tab tbStudent = new Tab("Student");
        Tab tbSemester = new Tab("Semester");
        Tab tbCourse = new Tab("Course");
        Tab tbEnroll = new Tab("Enroll a Student");
        
        // add Menu elements
        MenuBar mbarMenu = new MenuBar();
        Menu mApp = new Menu("App");
        MenuItem miQuit = new MenuItem("Quit App");
        
        // create Pane for tabs
        GridPane gStudPane = new GridPane();
        GridPane gSemPane = new GridPane();
        GridPane gCoursePane = new GridPane();
        GridPane gEnrollPane = new GridPane();
        
        // prompt getting of inforrmation
        txtStudName.setPromptText("First and Last Name");
        txtStudID.setPromptText("Student ID");
        txtSSN.setPromptText("Social Security Number");
        txtHomeAddress.setPromptText("Home Address");
        txtEmail.setPromptText("Email Address");
        txtGPA.setPromptText("GPA");
        txtEmergName.setPromptText("Emergency Contact Name");
        txtEmergEmail.setPromptText("Emergency Contact Email Address");
        txtEmergPhone.setPromptText("Emergency Contact Phone Number");
        
        txtPeriod.setPromptText("Period (Fall, Spring, etc)");
        txtYear.setPromptText("Year (YYYY)");
        
        txtCoursePrefix.setPromptText("Course Prefix");
        txtCourseNum.setPromptText("Course Number");
        txtCourseName.setPromptText("Course Name");
        txtCourseDays.setPromptText("Course Days");
        txtStartTime.setPromptText("Start Time");
        txtEndTime.setPromptText("End Time");
        txtCreditHours.setPromptText("Credit Hours");
       // txtCourseInst.setPromptText("Course Instructor: ");
        
        // have text go to next line if necessary
        lblEntryStud.setWrapText(true);
        lblEntrySem.setWrapText(true);
        lblEntryCourse.setWrapText(true);
        lblEntryEnroll.setWrapText(true);
        
        txtEnrollID.setPromptText("Enrollment ID");
        
        // add the titles to the appropriate tab 
        gStudPane.add(lblEntryStud, 0, 0);
        gSemPane.add(lblEntrySem, 0, 0);
        gCoursePane.add(lblEntryCourse, 0, 0);
        gEnrollPane.add(lblEntryEnroll, 0, 0);
        
        // arrange the comboBox and checkBox on one horizontal line
        
        // Student Tab 
        HBox hStudPane = new HBox();
        hStudPane.getChildren().addAll(studDropDown, cmboEditStud);
        // add to student tab 
        gStudPane.add(hStudPane, 2, 1);
        
        // establish everything disabled
        cmboEditStud.setDisable(true);
        cmboEditStud.setVisible(false);
        
        txtStudName.setDisable(true);
        txtStudID.setDisable(true);
        txtSSN.setDisable(true);
        txtHomeAddress.setDisable(true);
        txtEmail.setDisable(true);
        txtGPA.setDisable(true);
        txtEmergName.setDisable(true);
        txtEmergEmail.setDisable(true);
        txtEmergPhone.setDisable(true);
        
        // set on action to enable
        studDropDown.setOnAction(e -> {
            String selectedOption = (String)studDropDown.getValue();
            if (selectedOption.equals("Edit Student")) {
                cmboEditStud.setDisable(false);
                cmboEditStud.setVisible(true);
                
                enableStudentFields();
                
                // clear previous items
                cmboEditStud.getItems().clear();
                
                // repopulate the dropdown
                for(Student s : students) {
                    cmboEditStud.getItems().add(s.getFullName());
                }

                    
                cmboEditStud.setOnAction(event -> {

                       String selectStud = (String)cmboEditStud.getValue();

                       for(Student s : students) {
                        if(selectStud.equals(s.getFullName()))
                        {
                            txtStudName.setText(s.getFullName());
                            txtStudID.setText(String.valueOf(s.getID()));
                            txtSSN.setText(String.valueOf(s.getSSN()));
                            txtEmail.setText(s.getEmail());
                            txtHomeAddress.setText(s.getAddress());
                            txtGPA.setText(String.valueOf(s.getGPA()));
                            txtEmergName.setText(s.getEmergencyName());
                            txtEmergEmail.setText(s.getEmergencyEmail());
                            txtEmergPhone.setText(s.getEmergencyPhone());
                        }
                       }
                        
                    });
                
                clearStudentFields();
                
            }
            else if(selectedOption.equals("Create Student")) 
            {
                cmboEditStud.setDisable(true);
                cmboEditStud.setVisible(false);
                enableStudentFields();
            }
            else if (!selectedOption.equals("Edit Student"))
            {
                txtStudName.setDisable(true);
                txtStudID.setDisable(true);
                txtSSN.setDisable(true);
                txtHomeAddress.setDisable(true);
                txtEmail.setDisable(true);
                txtGPA.setDisable(true);
                txtEmergName.setDisable(true);
                txtEmergEmail.setDisable(true);
                txtEmergPhone.setDisable(true);
            }
            
            clearStudentFields();
            
        });
        
        
        // Semester Tab 
        HBox hSemPane = new HBox();
        hSemPane.getChildren().addAll(semDropDown, cmboEditSem);
        // add to semester tab 
        gSemPane.add(hSemPane, 2, 1);
        
        // set everything as disabled
        cmboEditSem.setDisable(true);
        cmboEditSem.setVisible(false);
        
        txtPeriod.setDisable(true);
        txtYear.setDisable(true);
        
        // if disabled...
        semDropDown.setOnAction(e -> {
            String selectedOption = (String)semDropDown.getValue();
            if (selectedOption.equals("Edit Semester"))
                    {
                       cmboEditSem.setDisable(false);
                       cmboEditSem.setVisible(true);
                       enableSemesterFields();
                       
                       // clear previous items
                       cmboEditSem.getItems().clear();
                       
                       // repopulate dropdown
                       for (Semester s : semesters) {
                           cmboEditSem.getItems().add(s.getPeriod() + " " + s.getYear());
                       }
                       
                       cmboEditSem.setOnAction(event -> {
                           String selectSem = (String)cmboEditSem.getValue();
                           
                           for (Semester s : semesters)
                           {
                               if(selectSem.equals(s.getPeriod() + " " + s.getYear()))
                               {
                                   txtPeriod.setText(s.getPeriod());
                                   txtYear.setText(s.getYear());
                               }
                           }
                       });
                       
                       clearSemesterFields();
                    }
            else if(selectedOption.equals("Create Semester"))
            {
                cmboEditSem.setDisable(true);
                cmboEditSem.setVisible(false);
                enableSemesterFields();
            }
            else
            {
                cmboEditSem.setDisable(true);
                cmboEditSem.setVisible(false);
                txtPeriod.setDisable(true);
                txtYear.setDisable(true);
            }
        });
        
        // Course tab
        HBox hCrsPane = new HBox();
        hCrsPane.getChildren().addAll(crsDropDown, cmboEditCourse);
        // add to course tab
        gCoursePane.add(hCrsPane, 2, 1);
        
        cmboEditCourse.setDisable(true);
        cmboEditCourse.setVisible(false);
        
        // disable all textfields until a choice is picked
        txtCoursePrefix.setDisable(true);
        txtCourseNum.setDisable(true);
        txtCourseName.setDisable(true);
        txtCourseDays.setDisable(true);
        txtStartTime.setDisable(true);
        txtEndTime.setDisable(true);
        txtCreditHours.setDisable(true);
   //   txtCourseInst.setDisable(true);
        
        crsDropDown.setOnAction(e -> {
            String selectOption = (String)crsDropDown.getValue();
            if(selectOption.equals("Edit Course"))
            {
                cmboEditCourse.setDisable(false);
                cmboEditCourse.setVisible(true);
                
                // clear previous items
                cmboEditCourse.getItems().clear();
                
                // repopulate
                for(Course c : courses)
                {
                    cmboEditCourse.getItems().add(c.getPrefix() + " " + c.getNum());
                }
                
                cmboEditCourse.setOnAction(event -> {
                    String selectedOption = (String)cmboEditCourse.getValue();
                    
                    for (Course c : courses)
                    {
                        if(selectedOption.trim().equals(c.getPrefix() + " " + c.getNum()))
                        {
                            txtCoursePrefix.setText(c.getPrefix());
                            txtCourseNum.setText(String.valueOf(c.getNum()));
                            txtCourseName.setText(c.getName());
                            txtCourseDays.setText(c.getDaysTaught());
                            txtStartTime.setText(c.getStartTime());
                            txtEndTime.setText(c.getEndTime());
                            txtCreditHours.setText(String.valueOf(c.getCredits()));
                            // course instructor???
                        }
                    }
                });
                clearCourseFields();
            }
            else if(selectOption.equals("Create Course"))
            {
                cmboEditCourse.setDisable(true);
                cmboEditCourse.setVisible(false);
                enableCourseFields();
            }
            else
            {
                cmboEditCourse.setDisable(true);
                cmboEditCourse.setVisible(false);
                txtCoursePrefix.setDisable(true);
                txtCourseNum.setDisable(true);
                txtCourseName.setDisable(true);
                txtCourseDays.setDisable(true);
                txtStartTime.setDisable(true);
                txtEndTime.setDisable(true);
                txtCreditHours.setDisable(true);
           //   txtCourseInst.setDisable(true);
            }
        });
        
        // Enroll tab - student
        HBox hEnrollStudPane = new HBox();
        hEnrollStudPane.getChildren().add(cmboEnrollStud);
        // arrange on main grid pane
        gEnrollPane.add(hEnrollStudPane, 3, 2);
        
        // Enroll tab - semester
        HBox hEnrollSemPane = new HBox();
        hEnrollSemPane.getChildren().add(cmboEnrollSem);
        // arrange on main grid pane
        gEnrollPane.add(hEnrollSemPane, 3, 5);
        
        // Enroll tab - course
        HBox hEnrollCrsPane = new HBox();
        hEnrollCrsPane.getChildren().add(cmboEnrollCrs);
        // arrange on main grid pane
        gEnrollPane.add(hEnrollCrsPane, 3, 8);
        
        
        
        // add menu to overall pane
        overallVPane.getChildren().add(mbarMenu);
        
        // position everything
        gStudPane.add(lblStudName, 0, 1);
        gStudPane.add(txtStudName, 1, 1);
        gStudPane.add(lblStudID, 0, 2);
        gStudPane.add(txtStudID, 1, 2);
        gStudPane.add(lblSSN, 0, 3);
        gStudPane.add(txtSSN, 1, 3);
        gStudPane.add(lblHomeAddress, 0, 4);
        gStudPane.add(txtHomeAddress, 1, 4);
        gStudPane.add(lblEmail, 0, 5);
        gStudPane.add(txtEmail, 1, 5);
        gStudPane.add(lblGPA, 0, 6);
        gStudPane.add(txtGPA, 1, 6);
        gStudPane.add(lblEmergName, 0, 7);
        gStudPane.add(txtEmergName, 1, 7);
        gStudPane.add(lblEmergEmail, 0, 8);
        gStudPane.add(txtEmergEmail, 1, 8);
        gStudPane.add(lblEmergPhone, 0, 9);
        gStudPane.add(txtEmergPhone, 1, 9);
        
        gSemPane.add(lblPeriod, 0, 1);
        gSemPane.add(txtPeriod, 1, 1);
        gSemPane.add(lblYear, 0, 2);
        gSemPane.add(txtYear, 1, 2);
        
        gCoursePane.add(lblCoursePrefix, 0, 1);
        gCoursePane.add(txtCoursePrefix, 1, 1);
        gCoursePane.add(lblCourseNum, 0, 2);
        gCoursePane.add(txtCourseNum, 1, 2);
        gCoursePane.add(lblCourseName, 0, 3);
        gCoursePane.add(txtCourseName, 1, 3);
        gCoursePane.add(lblCourseDays, 0, 4);
        gCoursePane.add(txtCourseDays, 1, 4);
        gCoursePane.add(lblStartTime, 0, 5);
        gCoursePane.add(txtStartTime, 1, 5);
        gCoursePane.add(lblEndTime, 0, 6);
        gCoursePane.add(txtEndTime, 1, 6);
        gCoursePane.add(lblCreditHours, 0, 7);
        gCoursePane.add(txtCreditHours, 1, 7);
        // gCoursePane.add(lblCourseInst, 0, 8);
        // gCoursePane.add(txtCourseInst, 1, 8);
        
        gEnrollPane.add(lblEnrollID, 0, 1);
        gEnrollPane.add(txtEnrollID, 1, 1);
        gEnrollPane.add(lblSelectStud, 0, 2);
        gEnrollPane.add(lblSelectSem, 0, 5);
        gEnrollPane.add(lblSelectCrs, 0, 8);
        
        // add quit option to app menu 
        mApp.getItems().add(miQuit);
        mbarMenu.getMenus().addAll(mApp);
        
        // set save button to its own anchorPane/layout container
        AnchorPane aStudPane = new AnchorPane();
        aStudPane.getChildren().add(btnSaveStud);
        
        AnchorPane aSemPane = new AnchorPane();
        aSemPane.getChildren().add(btnSaveSem);
        
        AnchorPane aCrsPane = new AnchorPane();
        aCrsPane.getChildren().add(btnSaveCourse);
        
        AnchorPane aEnrollPane = new AnchorPane();
        aEnrollPane.getChildren().add(btnEnroll);
        
        // add to grids
        gStudPane.add(aStudPane, 1, 10);
        gSemPane.add(aSemPane, 1, 3);
        gCoursePane.add(aCrsPane, 1, 9);
        gEnrollPane.add(aEnrollPane, 1, 9);
        
        // position the window and where it will pop up
        gStudPane.setAlignment(Pos.CENTER);
        gSemPane.setAlignment(Pos.CENTER);
        gCoursePane.setAlignment(Pos.CENTER);
        gEnrollPane.setAlignment(Pos.CENTER);
        
        gStudPane.setHgap(15);
        gStudPane.setVgap(15);
        
        gSemPane.setHgap(15);
        gSemPane.setVgap(15);
        
        gCoursePane.setHgap(15);
        gCoursePane.setVgap(15);
        
        gEnrollPane.setHgap(15);
        gEnrollPane.setVgap(15);
        
        // add built gridPane to tab
        tbStudent.setContent(gStudPane);
        tbSemester.setContent(gSemPane);
        tbCourse.setContent(gCoursePane);
        tbEnroll.setContent(gEnrollPane);
        
        // padding??? idk
        gStudPane.setPadding(new Insets(20, 0, 0, 0));
        gSemPane.setPadding(new Insets(20, 0 , 0 ,0));
        gCoursePane.setPadding(new Insets(20, 0, 0, 0));
        gEnrollPane.setPadding(new Insets(20, 0, 0, 0));
        
        // add both tabs to tab pane
        tPane.getTabs().addAll(tbStudent, tbSemester, tbCourse, tbEnroll);
        
        // add tab pane to VBox (overall pane)
        overallVPane.getChildren().add(tPane);
        
        // set everything up on the main window!
        Scene primaryScene = new Scene(overallVPane, 700, 600);
        stage.setScene(primaryScene);
        stage.setTitle("Unversity Management");
        stage.show();
        
        btnSaveStud.setOnAction(e -> {
            // Gather TextField Information
            String selectedOption = (String)studDropDown.getValue();
            
            String fullName = txtStudName.getText();
            int studID = Integer.valueOf(txtStudID.getText());
            int ssn = Integer.valueOf(txtSSN.getText());
            String homeAddress = txtHomeAddress.getText();
            String email = txtEmail.getText();
            double gpa = Double.valueOf(txtGPA.getText());
            String emergName = txtEmergName.getText();
            String emergEmail = txtEmergEmail.getText();
            String emergPhone = txtEmergPhone.getText();
            
            if(selectedOption.equals("Create Student"))
            {
                // make student object
                Student student = new Student(fullName, studID, ssn, homeAddress, email, gpa,
                    emergName, emergEmail, emergPhone);

                // add student object to arrayList
                students.add(student);
                // add to edit student comboBox 
                cmboEditStud.getItems().add(student.getFullName());
                // add to enroll student comboBox
                cmboEnrollStud.getItems().add(student.getFullName());
            }
            // for editing
            else if(selectedOption.equals("Edit Student")) 
            {
                String selectStud = cmboEditStud.getSelectionModel().getSelectedItem().toString();
                
                // find corresponding student object in the list
                for(Student s : students) {
                    if(s != null && selectStud != null &&
                            s.getFullName().equals(selectStud)) {
                        // update student information
                        s.setFullName(fullName);
                        s.setID(studID);
                        s.setSSN(ssn);
                        s.setEmail(email);
                        s.setAddress(homeAddress);
                        s.setGPA(gpa);
                        s.setEmergencyName(emergName);
                        s.setEmergencyEmail(emergEmail);
                        s.setEmergencyPhone(emergPhone);
                        break;
                    }
                }
            }
            cmboEditStud.setValue(null);
            clearStudentFields();
            updateStudent();
            
        });
        
        
       
        
        btnSaveSem.setOnAction(e -> {
            // gather textField information
            String selectedOption = (String)semDropDown.getValue();
            
            String period = txtPeriod.getText();
            String year = txtYear.getText();
            
            if(selectedOption.equals("Create Semester"))
            {
                Semester semester = new Semester(period, year);
                
                // add to semester array
                semesters.add(semester);
                // add to edit semester comboBox
                cmboEditSem.getItems().add(semester.getPeriod() + " " + semester.getYear());
                // add to enroll semester comboBox
                cmboEnrollSem.getItems().add(semester.getPeriod() + " " + semester.getYear());
            }
            else if(selectedOption.equals("Edit Semester"))
            {
                String selectSem = cmboEditSem.getSelectionModel().getSelectedItem().toString();
                
                // find corresponding semester object in array
                for(Semester s : semesters)
                {
                    if(s != null && selectSem != null && 
                            selectSem.equals(s.getPeriod() + " " + s.getYear()))
                    {
                        s.setPeriod(period);
                        s.setYear(year);
                        break;
                    }
                }
            }
            cmboEditSem.setValue(null);
            clearSemesterFields();
            updateSemester();
        });
        
        btnSaveCourse.setOnAction(e -> {
            // gather textfield information
            String selectedOption = (String)crsDropDown.getValue();
            
            String coursePrefix = txtCoursePrefix.getText();
            int courseNum = Integer.valueOf(txtCourseNum.getText());
            String courseName = txtCourseName.getText();
            String courseDays = txtCourseDays.getText();
            String startTime = txtStartTime.getText();
            String endTime = txtEndTime.getText();
            int creditHours = Integer.valueOf(txtCreditHours.getText());
            
            if(selectedOption.equals("Create Course"))
            {
                Course course = new Course(coursePrefix, courseNum, courseDays,
                        startTime, endTime, creditHours, courseName);
                
                // add course to array
                courses.add(course);
                
                // add to edit course comboBox
                cmboEditCourse.getItems().add(course.getPrefix() + " " + course.getNum());
                // add to enroll course comboBox
                cmboEnrollCrs.getItems().add(course.getPrefix() + " " + course.getNum());
            }
            else if(selectedOption.equals("Edit Course"))
            {
                String selectCourse = cmboEditCourse.getSelectionModel().getSelectedItem().toString();
                
                // find corresponding course object in list
                for (Course c : courses)
                {
                    if(c != null && selectCourse != null &&
                            selectCourse.equals(c.getPrefix() + " " + c.getNum()))
                    {
                        c.setPrefix(coursePrefix);
                        c.setNum(courseNum);
                        c.setName(courseName);
                        c.setDaysTaught(courseDays);
                        c.setStartTime(startTime);
                        c.setEndTime(endTime);
                        c.setCredits(creditHours);
                        break;
                    }
                }
            }
            cmboEditCourse.setValue(null);
            clearCourseFields();
            updateCourse();
        });
        
        btnEnroll.setOnAction(e -> {
            Student selectStud = (Student)cmboEnrollStud.getValue();
            Semester selectSem = (Semester)cmboEnrollSem.getValue();
            Course selectCrs = (Course)cmboEnrollCrs.getValue();
            
            // create objects to find
            Student stud = null;
            Semester sem = null;
            Course crs = null;
            
            // make the selectStud a student object
            for(Student s : students)
            {
                if(selectStud.getFullName().equals(s.getFullName()) &&
                        (selectStud.getID() == s.getID()))
                {
                    // create the student object if they match
                    stud = new Student(s.getFullName(), s.getID(), s.getSSN(), 
                    s.getAddress(), s.getEmail(), s.getGPA(), s.getEmergencyName(),
                    s.getEmergencyEmail(), s.getEmergencyPhone());
                }
            }
            for(Semester sm : semesters)
            {
                if(selectSem.getPeriod().equals(sm.getPeriod()) &&
                        (selectSem.getYear().equals(sm.getYear())))
                {
                    // create semester object
                    sem = new Semester(sm.getPeriod(), sm.getYear());
                }       
            }
            for(Course c : courses)
            {
                if(selectCrs.getPrefix().equals(c.getPrefix()) &&
                        (selectCrs.getNum() == (c.getNum())))
                {
                    // create course object if they match
                    crs = new Course(c.getPrefix(), c.getNum(), c.getDaysTaught(),
                    c.getStartTime(), c.getEndTime(), c.getCredits(), c.getName());
                }
            }
            
            // create enrollment object based off chosen 
            Enrollment enroll = new Enrollment(stud, sem, crs);
            
            // catch the enrollment id
            int enrollID = Integer.valueOf(txtEnrollID.getText());
            // attach to enrollment object
            enroll.setEnrollID(enrollID);
            
            // add to enrollment array
            enrollments.add(enroll);
            
            // add student to course roster
            enroll.courseEnrollment(crs);
        });
                
        
    }

    public static void main(String[] args) {
        launch();
    }
    
    public void clearStudentFields() {
        // clear inputs to get ready for next user input
            txtStudName.clear();
            txtStudID.clear();
            txtSSN.clear();
            txtHomeAddress.clear();
            txtEmail.clear();
            txtGPA.clear();
            txtEmergName.clear();
            txtEmergEmail.clear();
            txtEmergPhone.clear();
    }
    
    public void enableStudentFields() {
        
        txtStudName.setDisable(false);
        txtStudID.setDisable(false);
        txtSSN.setDisable(false);
        txtHomeAddress.setDisable(false);
        txtEmail.setDisable(false);
        txtGPA.setDisable(false);
        txtEmergName.setDisable(false);
        txtEmergEmail.setDisable(false);
        txtEmergPhone.setDisable(false);
    }
    
    public void enableSemesterFields() {
        txtPeriod.setDisable(false);
        txtYear.setDisable(false);
    }
    
    public void clearSemesterFields() {
        txtPeriod.clear();
        txtYear.clear();
    }
    
    public void enableCourseFields() {
        txtCoursePrefix.setDisable(false);
        txtCourseNum.setDisable(false);
        txtCourseName.setDisable(false);
        txtCourseDays.setDisable(false);
        txtStartTime.setDisable(false);
        txtEndTime.setDisable(false);
        txtCreditHours.setDisable(false);
        // txtCourseInst.setDisable(false);
    }
    
    public void clearCourseFields() {
        txtCoursePrefix.clear();
        txtCourseNum.clear();
        txtCourseName.clear();
        txtCourseDays.clear();
        txtStartTime.clear();
        txtEndTime.clear();
        txtCreditHours.clear();
        // txtCourseInst.clear();
    }
    
    public void updateStudent() {
        cmboEditStud.getItems().clear();
        cmboEnrollStud.getItems().clear();
        for (Student s : students) {
            cmboEditStud.getItems().add(s.getFullName());
            cmboEnrollStud.getItems().add(s.getFullName());
        }
    }
    
    public void updateSemester() {
        cmboEditSem.getItems().clear();
        cmboEnrollSem.getItems().clear();
        for(Semester s : semesters) {
            cmboEditSem.getItems().add(s.getPeriod() + " " + s.getYear());
            cmboEnrollSem.getItems().add(s.getPeriod() + " " + s.getYear());
        }
    }
    
    public void updateCourse() {
        cmboEditCourse.getItems().clear();
        cmboEnrollCrs.getItems().clear();
        for(Course c : courses) {
            cmboEditCourse.getItems().add(c.getPrefix() + " " + c.getNum());
            cmboEnrollCrs.getItems().add(c.getPrefix() + " " + c.getNum());
        }
    }
    

}

/* where i left off:
add text areas to display messages or 
just some kind of indication that what
the user did was a success

example: when you are creating something (ex: student)
have an empty text area below everything and when they create one, it appears inside
*/
