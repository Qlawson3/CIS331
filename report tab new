package com.mycompany.project2_report;

import java.util.ArrayList;
import java.util.List;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class App extends Application {

    List<Faculty> facultyArray = new ArrayList<>();
    List<Student> studentArray = new ArrayList<>();
    List<Course> courseArray = new ArrayList<>();
    List<Semester> semesterArray = new ArrayList<>();
    List<Enrollment> enrollArray = new ArrayList<>();

    @Override
    public void start(Stage stage) {
        initializeData();

        Label header = new Label("Choose what report you want to create:");
        ChoiceBox<String> dropdown = new ChoiceBox<>();
        ChoiceBox<String> dropdownSemester = new ChoiceBox<>();
        ChoiceBox<String> dropdownCourse = new ChoiceBox<>();
        ChoiceBox<String> dropdownStudent = new ChoiceBox<>();
        ChoiceBox<String> dropdownFaculty = new ChoiceBox<>();
        TextArea output = new TextArea();
        Button generate = new Button("Generate Report");

        dropdown.getItems().addAll(
            "Generate all courses in a semester",
            "Generate all courses in a semester by a selected faculty member",
            "Generate all courses in a semester for a selected student",
            "Generate all students enrolled in a course for a selected semester"
        );

        GridPane gridPane = new GridPane();
        setupGridPane(gridPane, header, dropdown, dropdownSemester, dropdownCourse, dropdownStudent, dropdownFaculty, output, generate);

        Scene scene = new Scene(gridPane, 800, 400);
        stage.setTitle("Report Generator");
        stage.setScene(scene);
        stage.show();

        setupDropdownHandlers(dropdown, dropdownSemester, dropdownCourse, dropdownStudent, dropdownFaculty, output);
        setupGenerateButtonHandler(generate, dropdown, dropdownSemester, dropdownCourse, dropdownStudent, dropdownFaculty, output);
    }

    private void initializeData() {
        // Populate your model lists with sample data
        // Assume these methods exist and populate data appropriately
    }

    private void setupGridPane(GridPane gridPane, Label header, ChoiceBox<String> dropdown, ChoiceBox<String> dropdownSemester, ChoiceBox<String> dropdownCourse, ChoiceBox<String> dropdownStudent, ChoiceBox<String> dropdownFaculty, TextArea output, Button generate) {
        gridPane.add(header, 0, 0);
        gridPane.add(dropdown, 1, 0);
        gridPane.add(new Label("Semester:"), 0, 1);
        gridPane.add(dropdownSemester, 1, 1);
        gridPane.add(new Label("Course:"), 0, 2);
        gridPane.add(dropdownCourse, 1, 2);
        gridPane.add(new Label("Student:"), 0, 3);
        gridPane.add(dropdownStudent, 1, 3);
        gridPane.add(new Label("Faculty:"), 0, 4);
        gridPane.add(dropdownFaculty, 1, 4);
        gridPane.add(output, 0, 5, 2, 1);
        gridPane.add(generate, 0, 6, 2, 1);
        gridPane.setHgap(10);
        gridPane.setVgap(10);
    }

    private void setupDropdownHandlers(ChoiceBox<String> dropdown, ChoiceBox<String> dropdownSemester, ChoiceBox<String> dropdownCourse, ChoiceBox<String> dropdownStudent, ChoiceBox<String> dropdownFaculty, TextArea output) {
        dropdown.setOnAction(e -> {
            String selection = dropdown.getValue();
            dropdownSemester.setVisible("Generate all courses in a semester".equals(selection) || "Generate all courses in a semester by a selected faculty member".equals(selection) || "Generate all courses in a semester for a selected student".equals(selection));
            dropdownCourse.setVisible("Generate all students enrolled in a course for a selected semester".equals(selection));
            dropdownStudent.setVisible("Generate all courses in a semester for a selected student".equals(selection));
            dropdownFaculty.setVisible("Generate all courses in a semester by a selected faculty member".equals(selection));
            output.clear();
        });
    }

    private void setupGenerateButtonHandler(Button generate, ChoiceBox<String> dropdown, ChoiceBox<String> dropdownSemester, ChoiceBox<String> dropdownCourse, ChoiceBox<String> dropdownStudent, ChoiceBox<String> dropdownFaculty, TextArea output) {
        generate.setOnAction(e -> {
            String reportType = dropdown.getValue();
            switch (reportType) {
                case "Generate all courses in a semester":
                    output.setText(generateReportAllCoursesInSemester(dropdownSemester.getValue()));
                    break;
                case "Generate all courses in a semester by a selected faculty member":
                    output.setText(generateReportCoursesByFaculty(dropdownSemester.getValue(), dropdownFaculty.getValue()));
                    break;
                case "Generate all courses in a semester for a selected student":
                    output.setText(generateReportCoursesForStudent(dropdownSemester.getValue(), dropdownStudent.getValue()));
                    break;
                case "Generate all students enrolled in a course for a selected semester":
                    output.setText(generateReportStudentsInCourse(dropdownSemester.getValue(), dropdownCourse.getValue()));
                    break;
                default:
                    output.setText("Invalid report type selected.");
                    break;
            }
        });
    }

    // Implementations for each report type
    private String generateReportAllCoursesInSemester(String semesterDescription) {
        if (semesterDescription == null || semesterDescription.isEmpty()) return "No semester selected.";
        for (Semester sem : semesterArray) {
            if ((sem.getPeriod() + " " + sem.getYear()).equals(semesterDescription)) {
                StringBuilder report = new StringBuilder();
                for (Course course : sem.getCourses()) {
                    report.append(course.getPrefix()).append(" ").append(course.getNum()).append(" - ").append(course.getTitle()).append("\n");
                }
                return report.toString();
            }
        }
        return "Semester not found.";
    }

    private String generateReportCoursesByFaculty(String semesterDescription, String facultyName) {
        if (semesterDescription == null || semesterDescription.isEmpty() || facultyName == null || facultyName.isEmpty())
            return "Semester or faculty not selected.";

        for (Semester sem : semesterArray) {
            if ((sem.getPeriod() + " " + sem.getYear()).equals(semesterDescription)) {
                StringBuilder report = new StringBuilder();
                for (Course course : sem.getCourses()) {
                    if (course.getFaculty().getFullName().equals(facultyName)) {
                        report.append(course.getPrefix()).append(" ").append(course.getNum()).append(" - ").append(course.getTitle()).append("\n");
                    }
                }
                return report.length() > 0 ? report.toString() : "No courses found for this faculty in the selected semester.";
            }
        }
        return "Semester not found.";
    }

    private String generateReportCoursesForStudent(String semesterDescription, String studentName) {
        if (semesterDescription == null || semesterDescription.isEmpty() || studentName == null || studentName.isEmpty())
            return "Semester or student not selected.";

        for (Semester sem : semesterArray) {
            if ((sem.getPeriod() + " " + sem.getYear()).equals(semesterDescription)) {
                StringBuilder report = new StringBuilder();
                for (Enrollment enrollment : enrollArray) {
                    if (enrollment.getStudent().getFullName().equals(studentName) && enrollment.getSemester().equals(sem)) {
                        Course course = enrollment.getCourse();
                        report.append(course.getPrefix()).append(" ").append(course.getNum()).append(" - ").append(course.getTitle()).append("\n");
                    }
                }
                return report.length() > 0 ? report.toString() : "No courses found for this student in the selected semester.";
            }
        }
        return "Semester not found.";
    }

    private String generateReportStudentsInCourse(String semesterDescription, String courseDescription) {
        if (semesterDescription == null || semesterDescription.isEmpty() || courseDescription == null || courseDescription.isEmpty())
            return "Semester or course not selected.";

        for (Semester sem : semesterArray) {
            if ((sem.getPeriod() + " " + sem.getYear()).equals(semesterDescription)) {
                for (Course course : sem.getCourses()) {
                    if ((course.getPrefix() + " " + course.getNum()).equals(courseDescription)) {
                        StringBuilder report = new StringBuilder();
                        for (Student student : course.getEnrolledStudents()) {
                            report.append(student.getFullName()).append("\n");
                        }
                        return report.length() > 0 ? report.toString() : "No students found enrolled in this course.";
                    }
                }
            }
        }
        return "Course or semester not found.";
    }

    public static void main(String[] args) {
        launch(args);
    }
}
